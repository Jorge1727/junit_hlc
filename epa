'use strict';


const sql = require('mssql');

const config = {
  server: 'localhost',
  database: 'angularProyectoVN',
  options:{
    trustedConnection: true,
    trustServerCertificate: true
  }
};


/**
 * Create user
 * This can only be done by the logged in user.
 *
 * body User Created user object (optional)
 * returns User
 **/

let users = [
  {
  firstName : "Jorge",
  lastName : "Tapia",
  password : "12345",
  userStatus : 1,
  phone : "6665588",
  id : 1,
  email : "jorge@email.com",
  username : "jorge24"
},
{
  firstName : "Ignacio",
  lastName : "Perez",
  password : "12345",
  userStatus : 1,
  phone : "66555444",
  id : 2,
  email : "nacho@email.com",
  username : "nacho24"
},
{
  firstName : "John",
  lastName : "James",
  password : "12345",
  userStatus : 1,
  phone : "12345",
  id : 3,
  email : "john@email.com",
  username : "sergio"
}
]
exports.createUser = function(body) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "firstName" : "John",
  "lastName" : "James",
  "password" : "12345",
  "userStatus" : 1,
  "phone" : "12345",
  "id" : 10,
  "email" : "john@email.com",
  "username" : "theUser"
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Create user
 * This can only be done by the logged in user.
 *
 * body User Created user object (optional)
 * returns User
 **/
exports.createUser = function(body) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "firstName" : "John",
  "lastName" : "James",
  "password" : "12345",
  "userStatus" : 1,
  "phone" : "12345",
  "id" : 10,
  "email" : "john@email.com",
  "username" : "theUser"
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Delete user
 * This can only be done by the logged in user.
 *
 * idUsername String The name that needs to be deleted
 * no response value expected for this operation
 **/
exports.deleteUser = function(idUsername) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Get user by user name
 *
 * idUsername String The name that needs to be fetched. Use user1 for testing. 
 * returns User
 **/
exports.getUserByName = function(idUsername) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "firstName" : "John",
  "lastName" : "James",
  "password" : "12345",
  "userStatus" : 1,
  "phone" : "12345",
  "id" : 10,
  "email" : "john@email.com",
  "username" : "theUser"
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Logs user into the system
 *
 * username String The user name for login (optional)
 * password String The password for login in clear text (optional)
 * returns User
 **/
exports.loginUser = function(username,password) {
  console.log('servicio username,password',username,password)
  return new Promise(async function(resolve, reject) {

    // users.forEach(user => {
    //   if(user.username === username && user.password === password){
    //     resolve(user)
    //   }
    // });
    // resolve();

    await sql.connect(config).then( async pool =>{
      return await pool.request()
      ,input('username', sql.VarChar, username)
      ,input('username', sql.VarChar, username)
      ,query('SELECT * FROM Users WHERE username = @username AND password = @password');
      
    }).then(result => {
      const user = result.recordset[0];
      if (!user) {
        reject(new Error("Usuario no vÃ¡lido"));
      } else {
        resolve(user);
      }
    }).catch(err =>{
      reject(err);
    });
  });
}


/**
 * Logs out current logged in user session
 *
 * no response value expected for this operation
 **/
exports.logoutUser = function() {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Update user
 * This can only be done by the logged in user.
 *
 * body User Update an existent user in the store (optional)
 * idUsername String name that need to be deleted
 * no response value expected for this operation
 **/
exports.updateUser = function(body,idUsername) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}


/**
 * Update user
 * This can only be done by the logged in user.
 *
 * body User Update an existent user in the store (optional)
 * idUsername String name that need to be deleted
 * no response value expected for this operation
 **/
exports.updateUser = function(body,idUsername) {
  return new Promise(function(resolve, reject) {
    resolve();
  });
}
